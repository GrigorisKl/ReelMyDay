generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ------------------------- Domain Models -------------------------
 */

model Render {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName  String // e.g. reel-1755202029591.mp4
  url       String // e.g. /renders/reel-1755202029591.mp4
  bytes     Int
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Credentials auth (null if OAuth-only)
  passwordHash String?

  // Entitlements
  isPro       Boolean @default(false)
  exportsUsed Int     @default(0)

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]

  stripeCustomerId     String? @unique
  stripeSubscriptionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  renders    Render[]
  // ✅ proper relation field name (lowerCamel) and type
  renderJobs RenderJob[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  customerId        String
  subscriptionId    String
  plan              String
  status            String
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider, customerId])
  @@index([provider, subscriptionId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  tokenHash String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

/**
 * ------------------------- Render Queue -------------------------
 */

enum RenderJobStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}

model RenderJob {
  id String @id @default(cuid())

  // ✅ opposite side of the relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional denormalized email if you still want it
  userEmail String?

  status RenderJobStatus @default(QUEUED)

  // Payload/options your worker needs
  items   Json // array of {name?:string, mime?:string, dataUrl?:string, url?:string}
  options Json // { durationSec, maxPerVideoSec, keepVideoAudio, bgBlur, motion, music? }

  outputUrl String? // e.g. /renders/reel-<id>.mp4
  error     String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startedAt  DateTime?
  finishedAt DateTime?

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([userEmail, createdAt])
}
